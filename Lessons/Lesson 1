{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JohnPMeis/Python/blob/main/Lessons/Lesson%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## ***Introduction to Network Automation with Python: Lesson 1***  \n",
        "\n",
        "Contact: Anne Farmer, Collin College (afarmer@collin.edu). Intended only for use by active participants in ITSC 1342.\n",
        "\n",
        "\n",
        "**Running a Block of Code**\n",
        "\n",
        "Each block of code has a \"Play\" button to the left of it shaped like an arrow. To run a block of code, press the button, which becomes visible when you mouse over a particular block, holding the cursor over the left side. ***Please wait to run the code until you are asked to do so in class, as some items are sensitive to the number of active connections.***\n",
        "\n"
      ],
      "metadata": {
        "id": "L-wx_jPLoKmf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Math Operators**\n",
        "\n"
      ],
      "metadata": {
        "id": "5vKXGKgBrisM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Exponent\n",
        "3**3"
      ],
      "metadata": {
        "id": "bIWy7cXYGe6M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cd0a1cb8-2684-4b20-83cf-df4abdc16ad5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "27"
            ]
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Modulo (Remainder)\n",
        "25%4"
      ],
      "metadata": {
        "id": "ukcRmoS0Gikn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29bba0e1-04ac-4ba5-85dd-5570ee3d395e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Integer Division (Floored Quotient)\n",
        "31//6"
      ],
      "metadata": {
        "id": "MQap7Fm9GrqW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "23288c97-889b-4a83-f131-477557db6408"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Division\n",
        "44/10"
      ],
      "metadata": {
        "id": "3JHnbNPCGoPS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "87faa0f9-a967-45df-e8a3-8a146fb09a17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4.4"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Multiplication\n",
        "4*7"
      ],
      "metadata": {
        "id": "Dj1b9iYWGyDA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9aba8e30-5293-4fa7-cef7-d949c776cbd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "28"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Subtraction\n",
        "19-12"
      ],
      "metadata": {
        "id": "WewxQBN5G2ht",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "62eb448b-4d47-4ff7-a15b-9d1f70295e2e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Addition\n",
        "8+4"
      ],
      "metadata": {
        "id": "vAMqEeCLG6ge",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e1f383f-d5eb-42a0-fc92-d45743af8d2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "12"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**String Concatenation and Replication**"
      ],
      "metadata": {
        "id": "pyiWWTR_HUZe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Concatenation\n",
        "print('October' + 'November')\n",
        "print('October' + ' November')"
      ],
      "metadata": {
        "id": "4ARCYtsvHm-k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3931bbbb-09cc-4273-8cce-017f81cfc65a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OctoberNovember\n",
            "October November\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Replication\n",
        "print('October'*3)"
      ],
      "metadata": {
        "id": "CcqLwyMhHxjp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d5190e5d-7847-49da-8342-d5671bd43571"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "OctoberOctoberOctober\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Concatenation of Different Data Types (Error Expected)\n",
        "print('October' + 11)"
      ],
      "metadata": {
        "id": "5X64vfs4H5an",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 162
        },
        "outputId": "8c9f5953-3948-413e-b180-4a5388f5b5a8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "can only concatenate str (not \"int\") to str",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-8f0c636fff38>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Concatenation of Different Data Types (Error Expected)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'October'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m11\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Proper Concatenation by Converting Data Types\n",
        "print('October ' + str(11))"
      ],
      "metadata": {
        "id": "x5D7pSXciCeC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e09a7887-2751-415c-a749-f0361abbf163"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "October 11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Strings must be in quotes (Error Expected)\n",
        "month = October"
      ],
      "metadata": {
        "id": "3dgPFxgAIEg6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 162
        },
        "outputId": "63c20f5f-d438-4524-d801-20b6e6124d40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'October' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-838fdb940c87>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Strings must be in quotes (Error Expected)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmonth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mOctober\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'October' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Correct string definition\n",
        "month = 'October'\n",
        "print(month)"
      ],
      "metadata": {
        "id": "3aYhwVShiVo3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3a0f94f7-4952-4ddc-c56d-9cd992101676"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "October\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Variable Assignment Updates\n",
        "month = 'October'\n",
        "month = 'November'\n",
        "#What is the value of month now?\n",
        "print(month)"
      ],
      "metadata": {
        "id": "wgz2wR6Vizyj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "594fa99c-cfcd-4600-e593-e48acb81946d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "November\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Case Sensitivity\n",
        "month = 'October'\n",
        "Month = 'November'\n",
        "print(month)\n",
        "print(Month)"
      ],
      "metadata": {
        "id": "opwdGm2pi9he",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c4f61c4-a85e-417e-e23e-59435f191886"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "October\n",
            "November\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Concatenating Strings With +\n",
        "firstword = 'Collin'\n",
        "nextword = 'College'\n",
        "print(firstword + ' ' + nextword)"
      ],
      "metadata": {
        "id": "qPgvaB55jUkt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c73b77e9-0895-46ce-bf1a-5b4d274efac6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collin College\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Input() Function\n",
        "user_input = input('What is your favorite food?')\n",
        "print(user_input)"
      ],
      "metadata": {
        "id": "54OTOYdPjxc7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9e1c7e64-7ab4-4b1d-8c9d-18e1594d91ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "What is your favorite food?Jelly beans\n",
            "Jelly beans\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Len() Function\n",
        "text = 'abc'\n",
        "len(text)"
      ],
      "metadata": {
        "id": "kaarZeDLkFV9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29cb5ab3-b82c-4e7b-9b8b-3d5a5752bf3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Len() Function\n",
        "text_two = 'I am not sure how long this sentence is.'\n",
        "len(text_two)"
      ],
      "metadata": {
        "id": "m3bcZo4Ukdcn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ad03f36-7ee5-46e3-8277-3618060b50ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "40"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Str(), int(), and float() Functions\n",
        "city = 'Plano'\n",
        "state = 'Texas'\n",
        "zipcode = 75074\n",
        "zipcode = str(zipcode)\n",
        "print(city + ', ' + state + ' ' + zipcode)"
      ],
      "metadata": {
        "id": "AhxBWjevkqSF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ceaa0883-ceb2-4469-caa7-790328c974c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Plano, Texas 75074\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Str(), int(), and float() Functions\n",
        "pi = 3.14\n",
        "print(pi)\n",
        "print(int(pi))\n",
        "print(str(pi))\n",
        "print(float(2))"
      ],
      "metadata": {
        "id": "NpwOF2zllFwW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "080de444-b250-4116-e81a-6d632a60e7c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.14\n",
            "3\n",
            "3.14\n",
            "2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Type() Function\n",
        "pi = 3.14\n",
        "print(type(pi))\n",
        "\n",
        "name = 'John'\n",
        "print(type(name))\n",
        "\n",
        "number = 5\n",
        "print(type(number))"
      ],
      "metadata": {
        "id": "dHYROSVwlVbG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fe323447-f04e-4576-ce82-2bdbf4feff20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'float'>\n",
            "<class 'str'>\n",
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Connecting to Devices**\n",
        "\n",
        "To connect to a device, we first need to import the netmiko package. This section of code must be run prior to running anything else that uses netmiko to connect to devices. Netmiko handles the process of connecting to the device based on the IP and port specified.\n",
        "Note: The \"!pip\" command is specific to Google Colab where this is hosted. On a regular machine, you would use \"pip install\" or \"pip3 install\" to install packages."
      ],
      "metadata": {
        "id": "kGJ0x-1xrVrB"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Fk1jVPQflyqP"
      },
      "outputs": [],
      "source": [
        "#Install the netmiko package (must run this before anything else; only needs to be run once per time you are using this notebook)\n",
        "!pip install netmiko\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**In-Class Assignment**\n",
        "\n",
        "You will be editing the following script to connect to different devices. We will discuss this as a group prior to beginning. Please do not run this script (do not hit the arrow) unless specifically requested to do so."
      ],
      "metadata": {
        "id": "ZeuAPpfIl0tc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Import the ConnectHandler function from Netmiko and specify device information\n",
        "from netmiko import ConnectHandler\n",
        "vyos = {\n",
        "         'device_type': 'vyos',\n",
        "         'ip': '128.177.0.130',\n",
        "         'port':'2201',\n",
        "         'username': 'itsc1342',\n",
        "         'password': '1342itsc',\n",
        "        }\n",
        "\n",
        "#Create SSH socket to connect to device using the data in the correct library\n",
        "net_connect = ConnectHandler(**vyos)\n",
        "\n",
        "#Retrieve prompt, assign the prompt to the variable 'prompt'\n",
        "prompt=net_connect.find_prompt()\n",
        "print(prompt)\n",
        "\n",
        "#Retrieve and print software version information.\n",
        "#Use the send_command() function to get version information.\n",
        "version = net_connect.send_command('show version')\n",
        "print(version)"
      ],
      "metadata": {
        "id": "MQdNoGNmnWU2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "79e0722d-24aa-477a-f864-ae0b106fed26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "itsc1342@DLLS-COR1:~$\n",
            "\n",
            "Version:          VyOS 1.3.2\n",
            "Release train:    equuleus\n",
            "\n",
            "Built by:         Sentrium S.L.\n",
            "Built on:         Mon 05 Sep 2022 09:23 UTC\n",
            "Build UUID:       1ceaab3a-4f4e-4692-b551-7c05e1da0a77\n",
            "Build commit ID:  7ce86511888635\n",
            "\n",
            "Architecture:     x86_64\n",
            "Boot via:         installed image\n",
            "System type:      KVM guest\n",
            "\n",
            "Hardware vendor:  QEMU\n",
            "Hardware model:   Standard PC (i440FX + PIIX, 1996)\n",
            "Hardware S/N:     \n",
            "Hardware UUID:    e66c3b29-a46c-4ac9-a2fe-3ba783c2264e\n",
            "\n",
            "Copyright:        VyOS maintainers and contributors\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Showing that dictionary name is arbitrary\n",
        "\n",
        "#Import the ConnectHandler function from Netmiko and specify device information\n",
        "device_type = input('Enter device type:')\n",
        "\n",
        "from netmiko import ConnectHandler\n",
        "abc = {\n",
        "         'device_type': device_type,\n",
        "         'ip': '128.177.0.130',\n",
        "         'port':'2201',\n",
        "         'username': 'itsc1342',\n",
        "         'password': '1342itsc',\n",
        "        }\n",
        "\n",
        "#Create SSH socket to connect to device using the data in the correct library\n",
        "net_connect = ConnectHandler(**abc)\n",
        "\n",
        "#Retrieve prompt, assign the prompt to the variable 'prompt'\n",
        "prompt=net_connect.find_prompt()\n",
        "print(prompt)\n",
        "\n",
        "#Retrieve and print software version information.\n",
        "#Use the send_command() function to get version information.\n",
        "version = net_connect.send_command('show version')\n",
        "print(version)"
      ],
      "metadata": {
        "id": "AbE4mFRtnC57",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 579
        },
        "outputId": "7d7a0131-a74b-4773-828f-7d5b9de69459"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Enter device type:vyos\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NetmikoTimeoutException",
          "evalue": "TCP connection to device failed.\n\nCommon causes of this problem are:\n1. Incorrect hostname or IP address.\n2. Wrong TCP port.\n3. Intermediate firewall blocking access.\n\nDevice settings: vyos 128.177.0.130:2201\n\n",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTimeoutError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/netmiko/base_connection.py\u001b[0m in \u001b[0;36mestablish_connection\u001b[0;34m(self, width, height)\u001b[0m\n\u001b[1;32m   1138\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1139\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mremote_conn_pre\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mssh_connect_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1140\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merror\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mconn_error\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/paramiko/client.py\u001b[0m in \u001b[0;36mconnect\u001b[0;34m(self, hostname, port, username, password, pkey, key_filename, timeout, allow_agent, look_for_keys, compress, sock, gss_auth, gss_kex, gss_deleg_creds, gss_host, banner_timeout, auth_timeout, channel_timeout, gss_trust_dns, passphrase, disabled_algorithms, transport_factory, auth_strategy)\u001b[0m\n\u001b[1;32m    385\u001b[0m                             \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 386\u001b[0;31m                     \u001b[0msock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maddr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    387\u001b[0m                     \u001b[0;31m# Break out of the loop on success\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTimeoutError\u001b[0m: timed out",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mNetmikoTimeoutException\u001b[0m                   Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-d589eb453cdd>\u001b[0m in \u001b[0;36m<cell line: 16>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;31m#Create SSH socket to connect to device using the data in the correct library\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 16\u001b[0;31m \u001b[0mnet_connect\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mConnectHandler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mabc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;31m#Retrieve prompt, assign the prompt to the variable 'prompt'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/netmiko/ssh_dispatcher.py\u001b[0m in \u001b[0;36mConnectHandler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    399\u001b[0m         )\n\u001b[1;32m    400\u001b[0m     \u001b[0mConnectionClass\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mssh_dispatcher\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 401\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mConnectionClass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    402\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    403\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/netmiko/base_connection.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, ip, host, username, password, secret, port, device_type, verbose, global_delay_factor, global_cmd_verify, use_keys, key_file, pkey, passphrase, disabled_algorithms, disable_sha2_fix, allow_agent, ssh_strict, system_host_keys, alt_host_keys, alt_key_file, ssh_config_file, conn_timeout, auth_timeout, banner_timeout, blocking_timeout, timeout, session_timeout, read_timeout_override, keepalive, default_enter, response_return, serial_settings, fast_cli, _legacy_mode, session_log, session_log_record_writes, session_log_file_mode, allow_auto_change, encoding, sock, sock_telnet, auto_connect, delay_factor_compat, disable_lf_normalization)\u001b[0m\n\u001b[1;32m    488\u001b[0m         \u001b[0;31m# Establish the remote connection\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    489\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mauto_connect\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 490\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    491\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    492\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/netmiko/base_connection.py\u001b[0m in \u001b[0;36m_open\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    493\u001b[0m         \u001b[0;34m\"\"\"Decouple connection creation from __init__ for mocking.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    494\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_modify_connection_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 495\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestablish_connection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    496\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_try_session_preparation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    497\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/netmiko/base_connection.py\u001b[0m in \u001b[0;36mestablish_connection\u001b[0;34m(self, width, height)\u001b[0m\n\u001b[1;32m   1159\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1160\u001b[0m                 \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmsg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1161\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mNetmikoTimeoutException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1162\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mparamiko\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mssh_exception\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAuthenticationException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mauth_err\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1163\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparamiko_cleanup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNetmikoTimeoutException\u001b[0m: TCP connection to device failed.\n\nCommon causes of this problem are:\n1. Incorrect hostname or IP address.\n2. Wrong TCP port.\n3. Intermediate firewall blocking access.\n\nDevice settings: vyos 128.177.0.130:2201\n\n"
          ]
        }
      ]
    }
  ]
}